// ********RoostGPT********
/*
Test generated by RoostGPT for test bankingportal using AI Type DBRX and AI Model mixtral-8x7b-instruct-v0.1
ROOST_METHOD_HASH=loadUserByUsername_5f0747eacb
ROOST_METHOD_SIG_HASH=loadUserByUsername_314e668229
1. Scenario 1: Test loading user by valid account number
TestName: loadUserByValidAccountNumber
Description: An attempt to load user details by a valid account number.
Execution:
Arrange: Create a User entity with valid account number and password. Set up UserRepository mock to return this user when findByAccountAccountNumber is called with the valid account number.
Act: Invoke loadUserByUsername method with valid account number.
Assert: Verify that the returned UserDetails object's username, password, and granted authorities match the provided valid account number and password.
Validation:
The test aims to verify that the method correctly loads user details by a valid account number, returns a UserDetails object, and populates it with the correct username, password, and empty granted authorities.
2. Scenario 2: Test loading user by invalid account number
TestName: loadUserByInvalidAccountNumber
Description: An attempt to load user details by an invalid account number.
Execution:
Arrange: Set up UserRepository mock to return null when findByAccountAccountNumber is called with an invalid account number.
Act: Invoke loadUserByUsername method with an invalid account number.
Assert: Verify that the method throws UsernameNotFoundException with the message "Invalid account number".
Validation:
The test aims to verify that the method correctly handles an invalid account number by throwing a UsernameNotFoundException with the specified error message.
3. Scenario 3: Test loading user by null account number
TestName: loadUserByNullAccountNumber
Description: An attempt to load user details by a null account number.
Execution:
Arrange: Leave userRepository unchanged to return null when findByAccountAccountNumber is called with a null account number.
Act: Invoke loadUserByUsername method with a null account number.
Assert: Verify that the method throws NullPointerException due to the null account number.
Validation:
The test aims to verify that the method correctly handles a null account number by throwing a NullPointerException.
4. Scenario 4: Test loading user by empty account number
TestName: loadUserByEmptyAccountNumber
Description: An attempt to load user details by an empty account number.
Execution:
Arrange: Leave userRepository unchanged to return null when findByAccountAccountNumber is called with an empty account number.
Act: Invoke loadUserByUsername method with an empty account number.
Assert: Verify that the method throws IllegalArgumentException due to the empty account number.
Validation:
The test aims to verify that the method correctly handles an empty account number by throwing an IllegalArgumentException.
*/
// ********RoostGPT********
package com.webapp.bankingportal.service;

import java.util.Collections;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.BDDMockito;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.BDDMockito.given;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Service;
import com.webapp.bankingportal.entity.User;
import com.webapp.bankingportal.repository.UserRepository;
import org.junit.jupiter.api.*;

@Tag("com.webapp.bankingportal.repository")
@Tag("com.webapp.bankingportal.repository.findByAccountAccountNumber")
@Tag("com.webapp.bankingportal.entity")
@Tag("com.webapp.bankingportal.entity.getAccountNumber")
@Tag("com.webapp.bankingportal.entity.getAccount")
@Tag("com.webapp.bankingportal.entity.getPassword")
@Tag("com.webapp.bankingportal.service")
@Tag("com.webapp.bankingportal.service.loadUserByUsername")
@Service
public class JwtUserDetailsServiceLoadUserByUsername implements UserDetailsService {

	private final UserRepository userRepository;

	@Autowired
	public JwtUserDetailsServiceLoadUserByUsername(UserRepository userRepository) {
		this.userRepository = userRepository;
	}

	@Override
	public UserDetails loadUserByUsername(String accountNumber) throws UsernameNotFoundException {
		User user = userRepository.findByAccountAccountNumber(accountNumber);
		if (user == null) {
			throw new UsernameNotFoundException("Invalid account number");
		}
		return new org.springframework.security.core.userdetails.User(user.getAccount().getAccountNumber(),
				user.getPassword(), Collections.emptyList());
	}

}

class JwtUserDetailsServiceLoadUserByUsernameTest {

	private UserRepository userRepository;

	private JwtUserDetailsServiceLoadUserByUsername jwtUserDetailsService;

	@BeforeEach
	public void setUp() {
		userRepository = mock(UserRepository.class);
		jwtUserDetailsService = new JwtUserDetailsServiceLoadUserByUsername(userRepository);
	}

	@Test
	public void loadUserByValidAccountNumber() throws UsernameNotFoundException {
		// Arrange
		User user = new User("123456789", "password");
		given(userRepository.findByAccountAccountNumber(ArgumentMatchers.eq("123456789"))).willReturn(user);
		// Act
		UserDetails userDetails = jwtUserDetailsService.loadUserByUsername("123456789");
		// Assert
		assertThat(userDetails.getUsername()).isEqualTo("123456789");
		assertThat(userDetails.getPassword()).isEqualTo("password");
		assertThat(userDetails.getAuthorities()).isEmpty();
	}

	@Test
	public void loadUserByInvalidAccountNumber() {
		// Arrange
		given(userRepository.findByAccountAccountNumber(ArgumentMatchers.anyString())).willReturn(null);
		// Act and Assert
		assertThatThrownBy(() -> jwtUserDetailsService.loadUserByUsername("invalid"))
			.isInstanceOf(UsernameNotFoundException.class)
			.hasMessage("Invalid account number");
	}

	@Test
	public void loadUserByNullAccountNumber() {
		// Act and Assert
		assertThatThrownBy(() -> jwtUserDetailsService.loadUserByUsername(null))
			.isInstanceOf(NullPointerException.class);
	}

	@Test
	public void loadUserByEmptyAccountNumber() {
		// Act and Assert
		assertThatThrownBy(() -> jwtUserDetailsService.loadUserByUsername(""))
			.isInstanceOf(IllegalArgumentException.class);
	}

}