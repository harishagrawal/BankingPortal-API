// ********RoostGPT********
/*
Test generated by RoostGPT for test bankingportal using AI Type DBRX and AI Model mixtral-8x7b-instruct-v0.1

ROOST_METHOD_HASH=handleNotFoundException_0ba485e37b
ROOST_METHOD_SIG_HASH=handleNotFoundException_f1d5382bdd

1. Scenario 1: Valid NotFoundException is thrown and caught

TestName: testValidNotFoundException()

Description: Verify that the handleNotFoundException method correctly handles a valid NotFoundException by returning a ResponseEntity with the appropriate status code and message.

Execution:
Arrange: Create an instance of NotFoundException with a message.
Act: Invoke the handleNotFoundException method with this NotFoundException instance.
Assert: Verify that the ResponseEntity returned has the status code NOT\_FOUND and the message from the NotFoundException.

Validation:
The assertion aims to verify that the handleNotFoundException method can correctly handle a NotFoundException and return a ResponseEntity with the appropriate status code (HTTP NOT\_FOUND) and message. This test is important to ensure that the application handles NotFoundExceptions gracefully and returns the correct status code to the client.

1. Scenario 2: Null NotFoundException is passed

TestName: testNullNotFoundException()

Description: Verify that the handleNotFoundException method correctly handles a null NotFoundException.

Execution:
Arrange: Do not create any NotFoundException instance.
Act: Invoke the handleNotFoundException method with null.
Assert: Verify that a NullPointerException is thrown.

Validation:
The assertion aims to verify that the handleNotFoundException method throws a NullPointerException if passed a null NotFoundException. This test is important to ensure that the method behaves as expected when receiving unexpected input.

1. Scenario 3: Invalid exception type is passed

TestName: testInvalidExceptionType()

Description: Verify that the handleNotFoundException method throws an IllegalArgumentException if a non-NotFoundException type is passed.

Execution:
Arrange: Create an instance of a different exception type, such as InvalidJwtTokenException.
Act: Invoke the handleNotFoundException method with this exception instance.
Assert: Verify that an IllegalArgumentException is thrown with an appropriate error message.

Validation:
The assertion aims to verify that the handleNotFoundException method throws an IllegalArgumentException if a non-NotFoundException type is passed. This test is important to ensure that the method behaves as expected when receiving unexpected input.

Note: The test method names have been created in camelCase format, as requested. The test scenarios cover both valid NotFoundException handling and various error conditions to ensure that the method behaves as expected in all cases.
*/

// ********RoostGPT********
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import com.webapp.bankingportal.controller.GlobalExceptionHandler;
import com.webapp.bankingportal.exception.InvalidJwtTokenException;
import com.webapp.bankingportal.exception.NotFoundException;

public class GlobalExceptionHandlerHandleNotFoundExceptionTest {

	GlobalExceptionHandler exceptionHandler = new GlobalExceptionHandler();

	@Test
	public void testValidNotFoundException() {
		String message = "Test NotFoundException";
		ResponseEntity<String> response = exceptionHandler.handleNotFoundException(new NotFoundException(message));
		Assertions.assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
		Assertions.assertEquals(message, response.getBody());
	}

	@Test
	public void testNullNotFoundException() {
		Assertions.assertThrows(NullPointerException.class, () -> exceptionHandler.handleNotFoundException(null));
	}

	@Test
	public void testInvalidExceptionType() {
		Assertions.assertThrows(IllegalArgumentException.class,
				() -> exceptionHandler.handleNotFoundException(new InvalidJwtTokenException("Test")));
	}

}
