// ********RoostGPT********
/*
Test generated by RoostGPT for test bankingportal using AI Type DBRX and AI Model mixtral-8x7b-instruct-v0.1

ROOST_METHOD_HASH=checkAccountPIN_1fb3c03583
ROOST_METHOD_SIG_HASH=checkAccountPIN_5a594c984f

1. Scenario 1: Check if account PIN exists for the logged-in user
TestName: checkIfPinCreatedForLoggedInUser
Description: Verify that the checkAccountPIN method returns a correct response indicating whether the PIN exists for the logged-in user.

Execution:
Arrange: Set up a mock AccountService that returns a known account number for the logged-in user.
Act: Call the checkAccountPIN method to get the response.
Assert: Verify that the response has the correct HTTP status and the 'hasPIN' field matches the expected value based on the account's PIN status.

Validation:
The assertion verifies that the method returns the correct response with the 'hasPIN' field set appropriately based on the account's PIN status. This test is important because it checks whether the application correctly identifies if the user has created a PIN.

---

2. Scenario 2: Check if PIN creation message is correct for a PIN-enabled account
TestName: checkPinCreatedMessageForPinEnabledAccount
Description: Verify that if the account has a PIN, the checkAccountPIN method returns a correct response with the "PIN Created" message.

Execution:
Arrange: Set up a mock AccountService that returns an account number with an existing PIN.
Act: Call the checkAccountPIN method to get the response.
Assert: Verify that the response has the correct HTTP status and the 'msg' field is set to "PIN Created".

Validation:
The assertion checks that the method returns the correct response with the "PIN Created" message when the account has a PIN. This test ensures that the application provides an accurate status message when the user has created a PIN.

---

3. Scenario 3: Check if PIN creation message is correct for a PIN-disabled account
TestName: checkPinCreatedMessageForPinDisabledAccount
Description: Verify that if the account does not have a PIN, the checkAccountPIN method returns a correct response with the "Pin Not Created" message.

Execution:
Arrange: Set up a mock AccountService that returns an account number without an existing PIN.
Act: Call the checkAccountPIN method to get the response.
Assert: Verify that the response has the correct HTTP status and the 'msg' field is set to "Pin Not Created".

Validation:
The assertion checks that the method returns the correct response with the "Pin Not Created" message when the account does not have a PIN. This test ensures that the application provides an accurate status message when the user has not created a PIN.

---

These test scenarios cover both the successful and unsuccessful cases when checking the account PIN using the `checkAccountPIN` method.
*/

// ********RoostGPT********
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import com.webapp.bankingportal.controller.AccountController;
import com.webapp.bankingportal.service.AccountService;

public class AccountControllerCheckAccountPinTest {

	@Mock
	private AccountService accountService;

	@InjectMocks
	private AccountController accountController;

	@BeforeEach
	public void init() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	public void checkIfPinCreatedForLoggedInUser() {
		String accountNumber = "123456789";
		when(accountService.isPinCreated(accountNumber)).thenReturn(true);
		ResponseEntity<?> response = accountController.checkAccountPIN();
		Map<String, Object> result = (Map<String, Object>) response.getBody();
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertTrue((boolean) result.get("hasPIN"));
		assertEquals("PIN Created", result.get("msg"));
	}

	@Test
	public void checkPinCreatedMessageForPinEnabledAccount() {
		String accountNumber = "123456789";
		when(accountService.isPinCreated(accountNumber)).thenReturn(true);
		ResponseEntity<?> response = accountController.checkAccountPIN();
		Map<String, Object> result = (Map<String, Object>) response.getBody();
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertEquals("PIN Created", result.get("msg"));
	}

	@Test
	public void checkPinCreatedMessageForPinDisabledAccount() {
		String accountNumber = "123456789";
		when(accountService.isPinCreated(accountNumber)).thenReturn(false);
		ResponseEntity<?> response = accountController.checkAccountPIN();
		Map<String, Object> result = (Map<String, Object>) response.getBody();
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertEquals("Pin Not Created", result.get("msg"));
	}

}
