// ********RoostGPT********
/*
Test generated by RoostGPT for test bankingportal using AI Type DBRX and AI Model mixtral-8x7b-instruct-v0.1

ROOST_METHOD_HASH=configureGlobal_b09fab6199
ROOST_METHOD_SIG_HASH=configureGlobal_1a9cbbca9b

1. Scenario 1: Valid authentication manager builder configuration with correct user details service and password encoder

TestName: testValidAuthenticationManagerBuilderConfig()

Details: This test checks if the authentication manager builder is correctly configured with the JWT user details service and password encoder.

Execution:
Arrange: Create an instance of AuthenticationManagerBuilder and set the user details service and password encoder.
Act: Call the configureGlobal method with the created AuthenticationManagerBuilder instance.
Assert: Verify that the AuthenticationManagerBuilder is configured with the correct user details service and password encoder.

Validation: This test verifies that the authentication manager builder is configured correctly with the JWT user details service and password encoder, which is essential for successful authentication.

1. Scenario 2: Authentication manager builder configuration with null user details service should throw an exception

TestName: testAuthenticationManagerBuilderConfigWithNullUserDetailsService()

Details: This test checks if an exception is thrown when the authentication manager builder is configured with a null user details service.

Execution:
Arrange: Create an instance of AuthenticationManagerBuilder and set the user details service to null.
Act: Invoke the configureGlobal method with the created AuthenticationManagerBuilder instance.
Assert: Verify that an exception is thrown indicating that the user details service cannot be null.

Validation: This test verifies that the configureGlobal method correctly handles null user details services and throws an exception.

1. Scenario 3: Authentication manager builder configuration with null password encoder should throw an exception

TestName: testAuthenticationManagerBuilderConfigWithNullPasswordEncoder()

Details: This test checks if an exception is thrown when the authentication manager builder is configured with a null password encoder.

Execution:
Arrange: Create an instance of AuthenticationManagerBuilder and set the password encoder to null.
Act: Invoke the configureGlobal method with the created AuthenticationManagerBuilder instance.
Assert: Verify that an exception is thrown indicating that the password encoder cannot be null.

Validation: This test verifies that the configureGlobal method correctly handles null password encoders and throws an exception.

1. Scenario 4: Authentication manager builder configuration with unsupported password encoder should throw an exception

TestName: testAuthenticationManagerBuilderConfigWithUnsupportedPasswordEncoder()

Details: This test checks if an exception is thrown when the authentication manager builder is configured with an unsupported password encoder.

Execution:
Arrange: Create an instance of AuthenticationManagerBuilder and set the password encoder to an unsupported implementation.
Act: Invoke the configureGlobal method with the created AuthenticationManagerBuilder instance.
Assert: Verify that an exception is thrown indicating that the password encoder is not supported.

Validation: This test verifies that the configureGlobal method correctly handles unsupported password encoders and throws an exception.

1. Scenario 5: Authentication manager builder configuration with unauthorized user details service should throw an exception

TestName: testAuthenticationManagerBuilderConfigWithUnauthorizedUserDetailsService()

Details: This test checks if an exception is thrown when the authentication manager builder is configured with an unauthorized user details service.

Execution:
Arrange: Create an instance of AuthenticationManagerBuilder and set the user details service to an unauthorized implementation.
Act: Invoke the configureGlobal method with the created AuthenticationManagerBuilder instance.
Assert: Verify that an exception is thrown indicating that the user details service is not authorized.

Validation: This test verifies that the configureGlobal method correctly handles unauthorized user details services and throws an exception.
*/

// ********RoostGPT********
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.authentication.AuthenticationManagerBuilder;
import org.springframework.security.crypto.password.PasswordEncoder;
import static org.mockito.Mockito.*;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestContext;
import org.springframework.test.context.TestContextManager;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfig;

@WebAppConfiguration
@ContextConfiguration(classes = { WebSecurityConfig.class })
public class WebSecurityConfigConfigureGlobalTest {

	@Mock
	private AuthenticationManagerBuilder authManagerBuilder;

	@Mock
	private PasswordEncoder passwordEncoder;

	@Mock
	private JWTUserDetailsService jwtUserDetailsService;

	@InjectMocks
	private WebSecurityConfig webSecurityConfig;

	private MockMvc mockMvc;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(webSecurityConfig).addFilters(webSecurityConfig.httpBasic()).build();
	}

	@Test
    public void testConfigureGlobal() throws Exception {
        // Arrange
        when(authManagerBuilder.userDetailsService(jwtUserDetailsService)).thenReturn(authManagerBuilder);
        when(authManagerBuilder.passwordEncoder(passwordEncoder)).thenReturn(authManagerBuilder);

        // Act
        webSecurityConfig.configureGlobal(authManagerBuilder);

        // Assert
        verify(authManagerBuilder).userDetailsService(jwtUserDetailsService);
        verify(authManagerBuilder).passwordEncoder(passwordEncoder);
    }

	@Test
	public void testConfigureGlobalWithNullUserDetailsService() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();

		// Act and Assert
		assertThrows(Exception.class, () -> webSecurityConfig.configureGlobal(null));
	}

	@Test
	public void testConfigureGlobalWithNullPasswordEncoder() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();

		// Act and Assert
		assertThrows(Exception.class, () -> webSecurityConfig.configureGlobal(authManagerBuilder, null));
	}

	@Test
	public void testConfigureGlobalWithUnsupportedPasswordEncoder() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();
		PasswordEncoder unsupportedPasswordEncoder = new UnsupportedPasswordEncoder();

		// Act and Assert
		assertThrows(Exception.class,
				() -> webSecurityConfig.configureGlobal(authManagerBuilder, unsupportedPasswordEncoder));
	}

	@Test
	public void testConfigureGlobalWithUnauthorizedUserDetailsService() {
		// Arrange
		WebSecurityConfig webSecurityConfig = new WebSecurityConfig();
		JWTUserDetailsService unauthorizedUserDetailsService = new UnauthorizedUserDetailsService();

		// Act and Assert
		assertThrows(Exception.class,
				() -> webSecurityConfig.configureGlobal(authManagerBuilder, unauthorizedUserDetailsService));
	}

	// Define UnsupportedPasswordEncoder and UnauthorizedUserDetailsService as needed

}
