// ********RoostGPT********
/*
Test generated by RoostGPT for test bankingportal using AI Type DBRX and AI Model mixtral-8x7b-instruct-v0.1

ROOST_METHOD_HASH=getAccountNumber_2c191db7d9
ROOST_METHOD_SIG_HASH=getAccountNumber_8423548adb

1. Scenario 1: Test when authentication is null
TestName: testAuthenticationIsNull
Description: This test checks the behavior of the method when authentication is null, verifying that a NotFoundException is thrown.

Arrange:
Set SecurityContextHolder's authentication object to null.

Act:
Invoke the getAccountNumber method.

Assert:
Assert that a NotFoundException is thrown with the message "Account number not found in Security Context.".

Validation:
The purpose of this test is to confirm that the method correctly handles null authentication objects and throws an appropriate exception. This test validates the error handling related to the Spring Security context.

2. Scenario 2: Test when principal is not an instance of User
TestName: testPrincipalNotUserInstance
Description: This test checks the behavior of the method when the principal object is not an instance of User, verifying that a NotFoundException is thrown.

Arrange:
1. Set up an Authentication object with a principal that is not an instance of User (e.g., String or any other non-User object).
2. Set the Authentication object in SecurityContextHolder.

Act:
Invoke the getAccountNumber method.

Assert:
Assert that a NotFoundException is thrown with the message "Account number not found in Security Context.".

Validation:
This test ensures that the method handles cases where the principal object isn't an instance of User, providing robustness against unexpected types of objects.

3. Scenario 3: Test when authentication and principal are valid
TestName: testValidAuthenticationAndPrincipal
Description: This test checks the behavior of the method when both authentication and principal are valid User objects, returning the account number as expected.

Arrange:
1. Set up an Authentication object with a valid User object as the principal.
2. Set the Authentication object in SecurityContextHolder.

Act:
Invoke the getAccountNumber method.

Assert:
Assert that the method returns the expected account number (username in this case).

Validation:
The purpose of this test is to ensure that the method correctly retrieves the account number when both authentication and principal are valid User objects.
*/

// ********RoostGPT********
public static String getAccountNumber() {
    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    if (authentication == null || authentication.getPrincipal() == null || !(authentication.getPrincipal() instanceof User)) {
        throw new NotFoundException("Account number not found in Security Context.");
    }
    User user = (User) authentication.getPrincipal();
    return user.getUsername();
}
